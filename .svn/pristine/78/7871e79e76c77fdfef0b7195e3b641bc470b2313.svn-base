-- | Este módulo define funções comuns da Tarefa 6 do trabalho prático.
module Tarefa6_2018li1g006 where

import LI11819
import Tarefa4_2018li1g006
import Tarefa3_2018li1g006
import Tarefa2_2018li1g006
import Tarefa1_2018li1g006
import Tarefa0_2018li1g006

-- * Funções principais da Tarefa 6.

-- | Define um ro'bot' capaz de jogar autonomamente o jogo.
bot :: Int          -- ^ O identificador do 'Jogador' associado ao ro'bot'.
    -> Estado       -- ^ O 'Estado' para o qual o ro'bot' deve tomar uma decisão.
    -> Maybe Jogada -- ^ Uma possível 'Jogada' a efetuar pelo ro'bot'.
bot j (Estado m js ds) |not(balasNaMinhaDirecao (js !! j) ds) && estouProtegido js m (js!!j) ds == False = matrixBalas js m (js !! j) ds
                       |not(balasNaMinhaDirecao (js !! j) ds) && estouProtegido js m (js!!j) ds = Nothing
                       |toCloseL (js!!j) (filtraMortos js) = u2Close4Me m (js!!j) js ds
                       |rightNextToMe m (js!!j) = disparaToBlocos2 (js!!j) (rightNextToMeWhere m (js !! j))
                       |blocosInSight m (js!!j) (whereAreBlocos m (js!!j)) = getThemFreePoints m (js!!j) ds js
                       |otherwise = tryToKill m (js !! j) (quemFocar (js !! j) (tiraDaLista (js!!j) js)) ds js


---------------------------------------
------------Desviar das Balas----------
---------------------------------------
matrixBalas :: [Jogador] -> Mapa -> Jogador -> [Disparo] -> Maybe Jogada
matrixBalas js m j [] = Nothing
matrixBalas js mp (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) C ):t) |balaNaMinhaDirecao (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) C) = whereToDodge (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) C):t)) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)
                                                                              |otherwise = matrixBalas js mp (Jogador (x,y) d v las choq) t

matrixBalas js mp (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) B ):t) |balaNaMinhaDirecao (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) B) = whereToDodge (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) B):t)) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)
                                                                              |otherwise = matrixBalas js mp (Jogador (x,y) d v las choq) t 

matrixBalas js mp (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) E ):t) |balaNaMinhaDirecao (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) E) = whereToDodge (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) E):t)) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)
                                                                              |otherwise = matrixBalas js mp (Jogador (x,y) d v las choq) t

matrixBalas js mp (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) D ):t) |balaNaMinhaDirecao (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) D) = whereToDodge (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) D):t)) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)
                                                                              |otherwise = matrixBalas js mp (Jogador (x,y) d v las choq) t
matrixBalas js mp j (h:t) = matrixBalas js mp j t


balaNaMinhaDirecao :: Jogador -> Disparo -> Bool
balaNaMinhaDirecao (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) C) |x<m && (n==y ||n==y+1||n==y-1) = True
                                                                          |otherwise = False
balaNaMinhaDirecao (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) D) |y>n && (m==x ||m==x+1||m==x-1) = True
                                                                          |otherwise = False
balaNaMinhaDirecao (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) B) |x>m && (n==y ||n==y+1||n==y-1) = True
                                                                          |otherwise = False
balaNaMinhaDirecao (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) E) |y<n && (m==x ||m==x+1||m==x-1) = True
                                                                          |otherwise = False

balasNaMinhaDirecao :: Jogador -> [Disparo] -> Bool -- True nao tem balas , ou seja pode mover seguro
balasNaMinhaDirecao (Jogador (x,y) d v las choq) [] = True
balasNaMinhaDirecao (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) C):t) |x<m && (n==y ||n==y+1||n==y-1) = False
                                                                               |otherwise = balasNaMinhaDirecao (Jogador (x,y) d v las choq) t
balasNaMinhaDirecao (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) D):t) |y>n && (m==x ||m==x+1||m==x-1) = False
                                                                               |otherwise = balasNaMinhaDirecao (Jogador (x,y) d v las choq) t
balasNaMinhaDirecao (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) B):t) |x>m && (n==y ||n==y+1||n==y-1) = False
                                                                               |otherwise = balasNaMinhaDirecao (Jogador (x,y) d v las choq) t
balasNaMinhaDirecao (Jogador (x,y) d v las choq) ((DisparoCanhao j (m,n) E):t) |y<n && (m==x ||m==x+1||m==x-1) = False
                                                                               |otherwise = balasNaMinhaDirecao (Jogador (x,y) d v las choq) t
balasNaMinhaDirecao (Jogador (x,y) d v las choq) ((DisparoLaser j (m,n) C):t) |x<m && (n==y ||n==y+1||n==y-1) = False
                                                                              |otherwise = balasNaMinhaDirecao (Jogador (x,y) d v las choq) t
balasNaMinhaDirecao (Jogador (x,y) d v las choq) ((DisparoLaser j (m,n) D):t) |y>n && (m==x ||m==x+1||m==x-1) = False
                                                                              |otherwise = balasNaMinhaDirecao (Jogador (x,y) d v las choq) t
balasNaMinhaDirecao (Jogador (x,y) d v las choq) ((DisparoLaser j (m,n) B):t) |x>m && (n==y ||n==y+1||n==y-1) = False
                                                                              |otherwise = balasNaMinhaDirecao (Jogador (x,y) d v las choq) t
balasNaMinhaDirecao (Jogador (x,y) d v las choq) ((DisparoLaser j (m,n) E):t) |y<n && (m==x ||m==x+1||m==x-1) = False
                                                                              |otherwise = balasNaMinhaDirecao (Jogador (x,y) d v las choq) t
balasNaMinhaDirecao k (h:t) = balasNaMinhaDirecao k t

whereToDodge :: [Bool] -> [Bool] -> [Bool] -> Maybe Jogada
whereToDodge [False,False,False,False] _ _ = Nothing
whereToDodge _ _ [False,False,False,False] = Nothing
whereToDodge h t s |comparaLista h t s == [] = tryToRun h s 
                   |head (comparaLista h t s) == 1 = Just (Movimenta C)
                   |head (comparaLista h t s) == 2 = Just (Movimenta D)
                   |head (comparaLista h t s) == 3 = Just (Movimenta B)
                   |head (comparaLista h t s) == 4 = Just (Movimenta E)
                   where comparaLista h t s = aux 1 h t s
                         aux n [] [] [] = []
                         aux n (h:t) (x:y) (z:w) |n<5 && h == x && x == z = n:aux (n+1) t y w
                                                 |n<5 && (h/= x || h/= z || x/=z) = aux (n+1) t y w
                                                 |otherwise = []

tryToRun :: [Bool] -> [Bool] -> Maybe Jogada
tryToRun h s |head (comparaLista h s) == 1 = Just (Movimenta C)
             |head (comparaLista h s) == 2 = Just (Movimenta D)
             |head (comparaLista h s) == 3 = Just (Movimenta B)
             |head (comparaLista h s) == 4 = Just (Movimenta E)
              where comparaLista h s = aux 1 h s
                    aux n (h:t) (x:y) |n<5 && h == x = n:aux (n+1) t y
                                      |otherwise = aux (n+1) t  y


naoTemParede :: Mapa -> Jogador -> [Bool] -- [C,D,B,E]
naoTemParede m (Jogador (x,y) d v las choq) = [(encontraPosicaoMatriz (x-1,y) m == Vazia && encontraPosicaoMatriz (x-1,y+1) m == Vazia),(encontraPosicaoMatriz (x,y+2) m == Vazia && encontraPosicaoMatriz (x+1,y+2) m == Vazia),(encontraPosicaoMatriz (x+2,y) m == Vazia && encontraPosicaoMatriz (x+2,y+1) m == Vazia),(encontraPosicaoMatriz (x,y-1) m == Vazia && encontraPosicaoMatriz (x+1,y-1) m == Vazia)]

balaNaPosicao :: Jogador -> [Disparo] -> [Bool] -- [C,D,B,E]
balaNaPosicao (Jogador (x,y) d v las choq) ds = map (`balasNaMinhaDirecao` ds) [(Jogador (x-2,y) d v las choq),(Jogador (x,y+2) d v las choq),(Jogador (x+2,y) d v las choq),(Jogador (x,y-2) d v las choq)]

jogadorNaPosicao :: Jogador -> [Jogador] -> [Bool] -- [C,D,B,E]
jogadorNaPosicao (Jogador (x,y) d v las choq) js = [not(verificaJogadores (Jogador (x,y) d v las choq) C js),not(verificaJogadores (Jogador (x,y) d v las choq) D js),not(verificaJogadores (Jogador (x,y) d v las choq) B js),not(verificaJogadores (Jogador (x,y) d v las choq) E js)]

estouProtegido :: [Jogador] -> Mapa -> Jogador -> [Disparo] -> Bool
estouProtegido js mp jd [] = True
estouProtegido js mp jd ((DisparoCanhao j (x,y) C):t) |acerta js mp jd (DisparoCanhao j (x,y) C) = False
                                                      |otherwise = estouProtegido js mp jd t
estouProtegido js mp jd ((DisparoCanhao j (x,y) D):t) |acerta js mp jd (DisparoCanhao j (x,y) D) = False
                                                      |otherwise = estouProtegido js mp jd t
estouProtegido js mp jd ((DisparoCanhao j (x,y) B):t) |acerta js mp jd (DisparoCanhao j (x,y) B) = False
                                                      |otherwise = estouProtegido js mp jd t
estouProtegido js mp jd ((DisparoCanhao j (x,y) E):t) |acerta js mp jd (DisparoCanhao j (x,y) E) = False
                                                      |otherwise = estouProtegido js mp jd t
estouProtegido js mp jd (h:t) = estouProtegido js mp jd t

acerta :: [Jogador] -> Mapa -> Jogador -> Disparo -> Bool
acerta js mp (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) C) = posicaoFinal mp js (DisparoCanhao j (m,n) C) == (x+1,y) || posicaoFinal mp js (DisparoCanhao j (m,n) C) == (x+1,y-1) || posicaoFinal mp js (DisparoCanhao j (m,n) C) == (x+1,y+1)
acerta js mp (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) D) = posicaoFinal mp js (DisparoCanhao j (m,n) D) == (x,y-1) || posicaoFinal mp js (DisparoCanhao j (m,n) D) == (x+1,y-1) || posicaoFinal mp js (DisparoCanhao j (m,n) D) == (x-1,y-1)
acerta js mp (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) B) = posicaoFinal mp js (DisparoCanhao j (m,n) B) == (x-1,y) || posicaoFinal mp js (DisparoCanhao j (m,n) B) == (x-1,y-1) || posicaoFinal mp js (DisparoCanhao j (m,n) B) == (x-1,y+1)
acerta js mp (Jogador (x,y) d v las choq) (DisparoCanhao j (m,n) E) = posicaoFinal mp js (DisparoCanhao j (m,n) E) == (x,y+1) || posicaoFinal mp js (DisparoCanhao j (m,n) E) == (x+1,y+1) || posicaoFinal mp js (DisparoCanhao j (m,n) E) == (x-1,y+1)
acerta js mp (Jogador (x,y) d v las choq) (DisparoLaser j (m,n) dr) = let a = listaDePosicoes (m,n) (verOndePara mp (DisparoLaser j (m,n) dr))
                                                                      in elem (x,y) a ||elem (x,y+1) a||elem (x,y-1) a||elem (x+1,y) a||elem (x+1,y+1) a||elem (x+1,y-1) a||elem (x-1,y) a ||elem (x-1,y+1) a||elem (x-1,y-1) a


posicaoFinal :: Mapa -> [Jogador] -> Disparo -> Posicao
posicaoFinal mp js (DisparoCanhao j (x,y) C) |encontraPosicaoMatriz (x,y) mp == Vazia && encontraPosicaoMatriz (x,y+1) mp == Vazia && verJogador (DisparoCanhao j (x,y) C) js = posicaoFinal mp js (DisparoCanhao j (x-1,y) C)
                                             |otherwise = (x,y)
posicaoFinal mp js (DisparoCanhao j (x,y) D) |encontraPosicaoMatriz (x,y+1) mp == Vazia && encontraPosicaoMatriz (x+1,y+1) mp == Vazia && verJogador (DisparoCanhao j (x,y) D) js  = posicaoFinal mp js (DisparoCanhao j (x,y+1) D)
                                             |otherwise = (x,y)
posicaoFinal mp js (DisparoCanhao j (x,y) B) |encontraPosicaoMatriz (x+1,y) mp == Vazia && encontraPosicaoMatriz (x+1,y+1) mp == Vazia && verJogador (DisparoCanhao j (x,y) B) js = posicaoFinal mp js (DisparoCanhao j (x+1,y) B)
                                             |otherwise = (x,y)
posicaoFinal mp js (DisparoCanhao j (x,y) E) |encontraPosicaoMatriz (x,y) mp == Vazia && encontraPosicaoMatriz (x+1,y) mp == Vazia && verJogador (DisparoCanhao j (x,y) E) js  = posicaoFinal mp js (DisparoCanhao j (x,y-1) E)
                                             |otherwise = (x,y)

--------------------------------------------
------------Movimento && Disparo------------
--------------------------------------------

tryToKill :: Mapa 
          -> Jogador -- ^ O meu jogador
          -> Jogador -- ^ O jogador a focar
          -> [Disparo]
          -> [Jogador]
          -> Maybe Jogada
tryToKill mp j1@(Jogador (x,y) d v las choq) j2@(Jogador (m,n) d' v' las' choq') ds js |v'/=0 && las>0 && alinhado j1 j2 && inSight mp j1 j2 && apontar j1 j2 = Just (Dispara Laser)
                                                                                       |v'/=0 && alinhado j1 j2 && inSight mp j1 j2 && apontar j1 j2 = Just (Dispara Canhao)
                                                                                       |v'/=0 && alinhado j1 j2 && inSight mp j1 j2 && apontar j1 j2 == False = alinha j1 j2
                                                                                       |v'/= 0 && inSight mp j1 j2 == False = justMove j1 (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ds) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)
                                                                                       |otherwise = justMove j1 (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ds) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)

alinhado :: Jogador -> Jogador -> Bool
alinhado j1@(Jogador (x,y) d v las choq) j2@(Jogador (m,n) d' v' las' choq') |x<m && (n==y-1 || n==y || n == y+1) = True
                                                                             |x>m && (n==y-1 || n==y || n == y+1) = True
                                                                             |n<y && (m==x-1 || m==x || m == x+1) = True
                                                                             |n>y && (m==x-1 || m==x || m == x+1) = True
                                                                             |otherwise = False

apontar :: Jogador -> Jogador -> Bool
apontar j1@(Jogador (x,y) d v las choq) j2@(Jogador (m,n) d' v' las' choq') |alinhado j1 j2 && x<m && d == B = True
                                                                            |alinhado j1 j2 && x>m && d == C = True
                                                                            |alinhado j1 j2 && y<n && d == D = True
                                                                            |alinhado j1 j2 && y>n && d == E = True
                                                                            |otherwise = False

alinha :: Jogador -> Jogador -> Maybe Jogada
alinha j1@(Jogador (x,y) d v las choq) j2@(Jogador (m,n) d' v' las' choq') |x<m = Just (Movimenta B)
                                                                           |x>m = Just (Movimenta C)
                                                                           |y<n = Just (Movimenta D)
                                                                           |y>n = Just (Movimenta E)
                                                                           |otherwise = Nothing

inSight :: Mapa -> Jogador -> Jogador -> Bool
inSight mp j1@(Jogador (x,y) C v las choq) j2@(Jogador (m,n) d' v' las' choq') |x == m && (n==y-1||n==y||n==y+1) = True
                                                                               |encontraPosicaoMatriz (x,y) mp == Vazia && encontraPosicaoMatriz (x,y+1) mp == Vazia = inSight mp (Jogador (x-1,y) C v las choq) j2 
                                                                               |otherwise = False
inSight mp j1@(Jogador (x,y) D v las choq) j2@(Jogador (m,n) d' v' las' choq') |y == n && (m==x-1||m==x||m==x+1) = True
                                                                               |encontraPosicaoMatriz (x,y+1) mp == Vazia && encontraPosicaoMatriz (x+1,y+1) mp == Vazia = inSight mp (Jogador (x,y+1) D v las choq) j2 
                                                                               |otherwise = False
inSight mp j1@(Jogador (x,y) B v las choq) j2@(Jogador (m,n) d' v' las' choq') |x == m && (n==y-1||n==y||n==y+1) = True
                                                                               |encontraPosicaoMatriz (x+1,y) mp == Vazia && encontraPosicaoMatriz (x+1,y+1) mp == Vazia = inSight mp (Jogador (x+1,y) B v las choq) j2 
                                                                               |otherwise = False
inSight mp j1@(Jogador (x,y) E v las choq) j2@(Jogador (m,n) d' v' las' choq') |y == n && (n==x-1||m==x||m==x+1) = True
                                                                               |encontraPosicaoMatriz (x,y) mp == Vazia && encontraPosicaoMatriz (x+1,y) mp == Vazia = inSight mp (Jogador (x,y-1) E v las choq) j2 
                                                                               |otherwise = False

justMove :: Jogador -> [Bool] -> [Bool] -> [Bool] -> Maybe Jogada
justMove js [False,False,False,False] _ _ = Nothing
justMove js _ _ [False,False,False,False] = Nothing
justMove js h t s |comparaLista h t s == [] = tryToRuns js h s
                  |otherwise = whereToGo js (comparaLista h t s)
                   where comparaLista h t s = aux 1 h t s
                         aux n [] [] [] = []
                         aux n (h:t) (x:y) (z:w) |n<5 && h == x && x == z = n:aux (n+1) t y w
                                                 |n<5 && (h/= x || h/= z || x/=z) = aux (n+1) t y w
                                                 |otherwise = []

tryToRuns :: Jogador -> [Bool] -> [Bool] -> Maybe Jogada
tryToRuns js h s = whereToGo js (comparaLista h s)
               where comparaLista h s = aux 1 h s
                     aux n (h:t) (x:y) |n<5 && h == x = n:aux (n+1) t y
                                       |otherwise = aux (n+1) t  y      
                     aux n _ _ = []

whereToGo :: Jogador -> [Int] -> Maybe Jogada
whereToGo js (h:t) = let a = aux js (h:t)
                     in move js a 
                      where aux j [] = []
                            aux j [a] = [a]
                            aux j@(Jogador p C v las choq) (h:t) |h == 3 = aux j t
                                                                 |otherwise = h:aux j t
                            aux j@(Jogador p D v las choq) (h:t) |h == 4 = aux j t
                                                                 |otherwise = h:aux j t
                            aux j@(Jogador p B v las choq) (h:t) |h == 1 = aux j t
                                                                 |otherwise = h:aux j t
                            aux j@(Jogador p E v las choq) (h:t) |h == 2 = aux j t
                                                                 |otherwise = h:aux j t
                            move j@(Jogador x d v las choq) h = case d of
                                C -> if elem 1 h then Just (Movimenta C) else mover h
                                D -> if elem 2 h then Just (Movimenta D) else mover h
                                B -> if elem 3 h then Just (Movimenta B) else mover h
                                E -> if elem 4 h then Just (Movimenta E) else mover h
                            mover  h |head h == 1 = Just (Movimenta C)
                                     |head h == 2 = Just (Movimenta D)
                                     |head h == 3 = Just (Movimenta B)
                                     |head h == 4 = Just (Movimenta E)

quemFocar :: Jogador -> [Jogador] -> Jogador
quemFocar j [h] = h
quemFocar j1@(Jogador (x,y) d v las choq) ((Jogador (m,n) d1 v1 las1 choq1):(Jogador (m1,n1) d2 v2 las2 choq2):t) |v1 == 0 = quemFocar j1 ((Jogador (m1,n1) d2 v2 las2 choq2):t)
                                                                                                                  |(abs(m-x) + abs (n-y)) < (abs(x-m1) + abs(y-n1)) = quemFocar j1 ((Jogador (m,n) d1 v1 las1 choq1):t)
                                                                                                                  |otherwise = quemFocar j1 ((Jogador (m1,n1) d2 v2 las2 choq2):t)

tiraDaLista :: Jogador -> [Jogador] -> [Jogador]
tiraDaLista j (h:t) = if j == h then t else h:tiraDaLista j t

 
---------------------------------------------------
------------Destruir Blocos Destrutiveis------------
---------------------------------------------------

getThemFreePoints :: Mapa -> Jogador -> [Disparo] -> [Jogador] -> Maybe Jogada
getThemFreePoints mp j@(Jogador (x,y) d v las choq) ds js |blocosInSight mp j (whereAreBlocos mp j) = disparaToBlocos j (whereAreBlocos mp j)
                                                          |otherwise = justMove j (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ds) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)

blocosInSight :: Mapa -> Jogador -> [Bool] -> Bool
blocosInSight m j [False,False,False,False] = False
blocosInSight m j _ = True

whereAreBlocos :: Mapa -> Jogador -> [Bool]
whereAreBlocos mp j@(Jogador (x,y) d v las choq) = map (naDirecao j) [C,D,B,E]
                                                 where naDirecao (Jogador (x,y) d v las choq) C |(encontraPosicaoMatriz (x-1,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x-1,y+1) mp == Bloco Destrutivel) = True
                                                                                                |(encontraPosicaoMatriz (x-1,y) mp == Bloco Indestrutivel) && (encontraPosicaoMatriz (x-1,y+1) mp == Bloco Indestrutivel) = False
                                                                                                |(encontraPosicaoMatriz (x-1,y) mp == Vazia) && (encontraPosicaoMatriz (x-1,y+1) mp == Bloco Indestrutivel) = False
                                                                                                |(encontraPosicaoMatriz (x-1,y) mp == Bloco Indestrutivel) && (encontraPosicaoMatriz (x-1,y+1) mp == Vazia) = False
                                                                                                |otherwise = naDirecao (Jogador (x-1,y) d v las choq) C
                                                       naDirecao (Jogador (x,y) d v las choq) D |(encontraPosicaoMatriz (x,y+2) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y+2) mp == Bloco Destrutivel) = True
                                                                                                |(encontraPosicaoMatriz (x,y+2) mp == Bloco Indestrutivel) && (encontraPosicaoMatriz (x+1,y+2) mp == Bloco Indestrutivel) = False
                                                                                                |(encontraPosicaoMatriz (x,y+2) mp == Vazia) && (encontraPosicaoMatriz (x+1,y+2) mp == Bloco Indestrutivel) = False
                                                                                                |(encontraPosicaoMatriz (x,y+2) mp == Bloco Indestrutivel) && (encontraPosicaoMatriz (x+1,y+2) mp == Vazia) = False
                                                                                                |otherwise = naDirecao (Jogador (x,y+1) d v las choq) D
                                                       naDirecao (Jogador (x,y) d v las choq) B |(encontraPosicaoMatriz (x+2,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+2,y+1) mp == Bloco Destrutivel) = True
                                                                                                |(encontraPosicaoMatriz (x+2,y) mp == Bloco Indestrutivel) && (encontraPosicaoMatriz (x+2,y+1) mp == Bloco Indestrutivel) = False
                                                                                                |(encontraPosicaoMatriz (x+2,y) mp == Vazia) && (encontraPosicaoMatriz (x+2,y+1) mp == Bloco Indestrutivel) = False
                                                                                                |(encontraPosicaoMatriz (x+2,y) mp == Bloco Indestrutivel) && (encontraPosicaoMatriz (x+2,y+1) mp == Vazia) = False
                                                                                                |otherwise = naDirecao (Jogador (x+1,y) d v las choq) B
                                                       naDirecao (Jogador (x,y) d v las choq) E |(encontraPosicaoMatriz (x,y-1) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y-1) mp == Bloco Destrutivel) = True
                                                                                                |(encontraPosicaoMatriz (x,y-1) mp == Bloco Indestrutivel) && (encontraPosicaoMatriz (x+1,y-1) mp == Bloco Indestrutivel) = False
                                                                                                |(encontraPosicaoMatriz (x,y-1) mp == Vazia) && (encontraPosicaoMatriz (x+1,y-1) mp == Bloco Indestrutivel) = False
                                                                                                |(encontraPosicaoMatriz (x,y-1) mp == Bloco Indestrutivel) && (encontraPosicaoMatriz (x+1,y-1) mp == Vazia) = False
                                                                                                |otherwise = naDirecao (Jogador (x,y-1) d v las choq) E

disparaToBlocos :: Jogador -> [Bool] -> Maybe Jogada
disparaToBlocos j@(Jogador (x,y) dr v las choq) [a,b,c,d] |las > 0 && a == True && dr==C = Just (Dispara Laser)
                                                          |a == True && dr==C = Just (Dispara Canhao)
                                                          |a == True && dr/=C = Just (Movimenta C)
                                                          |las > 0 && b == True && dr==D = Just (Dispara Laser) 
                                                          |b == True && dr==D = Just (Dispara Canhao)
                                                          |b == True && dr/=D = Just (Movimenta D)
                                                          |las > 0 && c == True && dr==B = Just (Dispara Laser)
                                                          |c == True && dr==B = Just (Dispara Canhao)
                                                          |c == True && dr/=B = Just (Movimenta B)
                                                          |las > 0 && d == True && dr==E = Just (Dispara Laser)
                                                          |d == True && dr==E = Just (Dispara Canhao)
                                                          |d == True && dr/=E = Just (Movimenta E)
                                                          |otherwise = Nothing

disparaToBlocos2 :: Jogador -> [Bool] -> Maybe Jogada
disparaToBlocos2 j@(Jogador (x,y) dr v las choq) [a,b,c,d] |a == True && dr==C = Just (Dispara Canhao)
                                                           |a == True && dr/=C = Just (Movimenta C)
                                                           |b == True && dr==D = Just (Dispara Canhao)
                                                           |b == True && dr/=D = Just (Movimenta D)
                                                           |c == True && dr==B = Just (Dispara Canhao)
                                                           |c == True && dr/=B = Just (Movimenta B)
                                                           |d == True && dr==E = Just (Dispara Canhao)
                                                           |d == True && dr/=E = Just (Movimenta E)
                                                           |otherwise = Nothing

rightNextToMe :: Mapa -> Jogador -> Bool
rightNextToMe mp (Jogador (x,y) d v las choq) = ((encontraPosicaoMatriz (x-1,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x-1,y+1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x-1,y) mp == Vazia) && (encontraPosicaoMatriz (x-1,y+1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x-1,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x-1,y+1) mp) == Vazia) ||
                                                ((encontraPosicaoMatriz (x,y+2) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y+2) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x,y+2) mp == Vazia) && (encontraPosicaoMatriz (x+1,y+2) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x,y+2) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y+2) mp) == Vazia) ||
                                                ((encontraPosicaoMatriz (x+2,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+2,y+1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x+2,y) mp == Vazia) && (encontraPosicaoMatriz (x+2,y+1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x+2,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+2,y+1) mp) == Vazia) ||
                                                ((encontraPosicaoMatriz (x,y-1) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y-1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x,y-1) mp == Vazia) && (encontraPosicaoMatriz (x+1,y-1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x,y-1) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y-1) mp) == Vazia)

rightNextToMeWhere :: Mapa -> Jogador -> [Bool]
rightNextToMeWhere mp (Jogador (x,y) d v las choq) = [((encontraPosicaoMatriz (x-1,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x-1,y+1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x-1,y) mp == Vazia) && (encontraPosicaoMatriz (x-1,y+1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x-1,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x-1,y+1) mp) == Vazia), 
                                                      ((encontraPosicaoMatriz (x,y+2) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y+2) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x,y+2) mp == Vazia) && (encontraPosicaoMatriz (x+1,y+2) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x,y+2) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y+2) mp) == Vazia),
                                                      ((encontraPosicaoMatriz (x+2,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+2,y+1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x+2,y) mp == Vazia) && (encontraPosicaoMatriz (x+2,y+1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x+2,y) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+2,y+1) mp) == Vazia),
                                                      ((encontraPosicaoMatriz (x,y-1) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y-1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x,y-1) mp == Vazia) && (encontraPosicaoMatriz (x+1,y-1) mp) == Bloco Destrutivel) || ((encontraPosicaoMatriz (x,y-1) mp == Bloco Destrutivel) && (encontraPosicaoMatriz (x+1,y-1) mp) == Vazia)]


-----------------------------------
--------------Others---------------
-----------------------------------

u2Close4Me :: Mapa -> Jogador -> [Jogador] -> [Disparo] -> Maybe Jogada
u2Close4Me mp j@(Jogador (x,y) d v las choq) js ds |toCloseL j (filtraMortos js) && (tenhoChoqueAtivo (whoIsMe j js) ds) = tryToKill2 mp j (toClose j js) ds js
                                                   |choq > 0 && toCloseL j (filtraMortos js) && (tenhoChoqueAtivo (whoIsMe j js) ds) == False = Just (Dispara Choque)
                                                   |otherwise = justMove j (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ds) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)

toCloseL :: Jogador -> [Jogador] -> Bool
toCloseL j [] = False
toCloseL j@(Jogador (x,y) d v las choq) ((Jogador (m,n) d' v' l' c'):t) |(x==m && y == n) = toCloseL j t
                                                                        |abs(m-x)<=3 && abs(y-n) <=3 = True
                                                                        |otherwise = toCloseL j t

toClose :: Jogador -> [Jogador] -> Jogador
toClose j [h] = h
toClose j@(Jogador (x,y) d v las choq) ((Jogador (m,n) d' v' l' c'):t) |(x==m && y == n) = toClose j t
                                                                       |abs(m-x)<=3 && abs(y-n) <=3 = (Jogador (m,n) d' v' l' c')
                                                                       |otherwise = toClose j t

filtraMortos :: [Jogador] -> [Jogador]
filtraMortos [] = []
filtraMortos ((Jogador p d v las choq):t) = if v == 0 then filtraMortos t
                                                      else (Jogador p d v las choq):filtraMortos t


whoIsMe :: Jogador -> [Jogador] -> Int
whoIsMe j t = aux j t 0
             where aux j (h:t) n = if j == h then n else aux j t (n+1)

tenhoChoqueAtivo :: Int -> [Disparo] -> Bool
tenhoChoqueAtivo _ [] = False
tenhoChoqueAtivo n ((DisparoChoque j ts):t) = if n == j then True else tenhoChoqueAtivo n t
tenhoChoqueAtivo n (h:t) = tenhoChoqueAtivo n t

tryToKill2 :: Mapa 
           -> Jogador -- ^ O meu jogador
           -> Jogador -- ^ O jogador a focar
           -> [Disparo]
           -> [Jogador]
           -> Maybe Jogada
tryToKill2 mp j1@(Jogador (x,y) d v las choq) j2@(Jogador (m,n) d' v' las' choq') ds js |v'/=0 && las>0 && alinhado j1 j2 && inSight mp j1 j2 && apontar j1 j2 = Just (Dispara Laser)
                                                                                        |v'/=0 && alinhado j1 j2 && inSight mp j1 j2 && apontar j1 j2 = Just (Dispara Canhao)
                                                                                        |v'/=0 && alinhado j1 j2 && inSight mp j1 j2 && apontar j1 j2 == False = alinha j1 j2
                                                                                        |v'/=0 && alinhado j1 j2 && inSight mp j1 j2 == False && apontar j1 j2 == False = alinha j1 j2
                                                                                        |v'/= 0 && inSight mp j1 j2 == False = justMove j1 (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ds) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)
                                                                                        |otherwise = justMove j1 (naoTemParede mp (Jogador (x,y) d v las choq)) (balaNaPosicao (Jogador (x,y) d v las choq) ds) (jogadorNaPosicao (Jogador (x,y) d v las choq) js)