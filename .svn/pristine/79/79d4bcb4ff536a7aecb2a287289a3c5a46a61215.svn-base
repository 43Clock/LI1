-- | Este módulo define funções comuns da Tarefa 3 do trabalho prático.
module Tarefa3_2018li1g006 where

import LI11819
import Data.Char
import Tarefa0_2018li1g006
import Tarefa1_2018li1g006
import Tarefa2_2018li1g006


-- * Testes

-- | Testes unitários da Tarefa 3.
--
-- Cada teste é um 'Estado'.
testesT3 :: [Estado]
testesT3 = [(Estado {mapaEstado =[[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]], jogadoresEstado = [Jogador {posicaoJogador = (1,1), direcaoJogador = B, vidasJogador = 2, lasersJogador = 1, choquesJogador = 1},Jogador {posicaoJogador = (7,1), direcaoJogador = D, vidasJogador = 1, lasersJogador = 1, choquesJogador = 2},Jogador {posicaoJogador = (7,7), direcaoJogador = C, vidasJogador = 2, lasersJogador = 2, choquesJogador = 2},Jogador {posicaoJogador = (1,7), direcaoJogador = E, vidasJogador = 3, lasersJogador = 1, choquesJogador = 0}], disparosEstado = []}),
            (Estado {mapaEstado =[[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]], jogadoresEstado = [Jogador {posicaoJogador = (1,1), direcaoJogador = B, vidasJogador = 2, lasersJogador = 1, choquesJogador = 1},Jogador {posicaoJogador = (7,1), direcaoJogador = D, vidasJogador = 1, lasersJogador = 1, choquesJogador = 2},Jogador {posicaoJogador = (7,7), direcaoJogador = C, vidasJogador = 2, lasersJogador = 2, choquesJogador = 2},Jogador {posicaoJogador = (1,7), direcaoJogador = E, vidasJogador = 3, lasersJogador = 1, choquesJogador = 0}], disparosEstado = [(DisparoChoque 2 5),(DisparoCanhao 1 (3,1) D),(DisparoLaser 0 (1,6) B),(DisparoCanhao 3 (5,4) C),(DisparoLaser 2 (1,1) E)]}),
            (Estado [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]][(Jogador (2,2) D 1 1 1)] [(DisparoCanhao 0 (2,3) D)]),
            (Estado [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]] [(Jogador (2,2) D 1 1 1),(Jogador (10,10) C 3 4 5)] [(DisparoCanhao 0 (2,3) D)]),
            (Estado [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]] [(Jogador (2,2) D 1 1 1),(Jogador (8,10) C 3 4 5),(Jogador (6,6) B 3 1 2)] [(DisparoCanhao 0 (6,3) D),(DisparoLaser 2 (10,3) D),(DisparoChoque 1 5)]),
            (Estado {mapaEstado = [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Bloco Destrutivel,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Destrutivel,Bloco Indestrutivel,Bloco Destrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]], jogadoresEstado = [Jogador {posicaoJogador = (2,11), direcaoJogador = D, vidasJogador = 2, lasersJogador = 11, choquesJogador = 0},Jogador {posicaoJogador = (8,18), direcaoJogador = E, vidasJogador = 0, lasersJogador = 2, choquesJogador = 0},Jogador {posicaoJogador = (16,9), direcaoJogador = D, vidasJogador = 1, lasersJogador = 0, choquesJogador = 4},Jogador {posicaoJogador = (9,17), direcaoJogador = B, vidasJogador = 2, lasersJogador = 1, choquesJogador = 1}], disparosEstado = [DisparoChoque {jogadorDisparo = 0, tempoDisparo = 4},DisparoLaser {jogadorDisparo = 2, posicaoDisparo = (16,12), direcaoDisparo = D},DisparoCanhao {jogadorDisparo = 3, posicaoDisparo = (10,17), direcaoDisparo = B}]}),
            (Estado [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]] [(Jogador (1,1) B 10 2 3)] [(DisparoCanhao 0 (2,1) B)]),
            (Estado {mapaEstado = [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]], jogadoresEstado = [Jogador {posicaoJogador = (10,4), direcaoJogador = D, vidasJogador = 4, lasersJogador = 1, choquesJogador = 3},Jogador {posicaoJogador = (2,11), direcaoJogador = B, vidasJogador = 3, lasersJogador = 2, choquesJogador = 0},Jogador {posicaoJogador = (2,3), direcaoJogador = E, vidasJogador = 1, lasersJogador = 4, choquesJogador = 2},Jogador {posicaoJogador = (23,125), direcaoJogador = C, vidasJogador = 0, lasersJogador = 2, choquesJogador = 1}], disparosEstado = [DisparoCanhao {jogadorDisparo = 0, posicaoDisparo = (23,52), direcaoDisparo = C},DisparoCanhao {jogadorDisparo = 1, posicaoDisparo = (3,32), direcaoDisparo = B},DisparoCanhao {jogadorDisparo = 2, posicaoDisparo = (1,1), direcaoDisparo = D},DisparoCanhao {jogadorDisparo = 3, posicaoDisparo = (312,1), direcaoDisparo = C},DisparoLaser {jogadorDisparo = 0, posicaoDisparo = (23,52), direcaoDisparo = C},DisparoLaser {jogadorDisparo = 1, posicaoDisparo = (3,32), direcaoDisparo = B},DisparoLaser {jogadorDisparo = 2, posicaoDisparo = (1,1), direcaoDisparo = D},DisparoLaser {jogadorDisparo = 3, posicaoDisparo = (312,1), direcaoDisparo = C},DisparoChoque {jogadorDisparo = 2, tempoDisparo = 4}]}),
            (Estado [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]] [] []),
            (Estado [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]] [(Jogador (43,43) B 4 2 1)] []),
            (Estado [[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Vazia,Bloco Indestrutivel],[Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel,Bloco Indestrutivel]] [] [(DisparoChoque 3 2)])]
-- * Funções principais da Tarefa 3.

-- * Funçoes para o comprime

-- | Comprime um 'Estado' para formato textual.

comprime :: Estado -> String
comprime (Estado m js ds) = comprimeMapa m ++ "|" ++ comprimeJogadores js ++ "|" ++ comprimeDisparo ds

-- |Comprime a mapa numa string de informção minima para um tamanho reduzido de um mapa dado.
comprimeMapa :: Mapa   -- ^ O mapa vai ser lido e vai ver se na posicao x,y  se encontra um bloco destrutivel ou bloco indestrutivel ou peça vazia.
             -> String -- ^ String com a disposição do mapa.
comprimeMapa [] = []
comprimeMapa [h] = auxm1 h
comprimeMapa (m:ms) = auxm1 m ++ "\n" ++ comprimeMapa ms

-- |Cado tipo de peça vai ser uma Char diferente.
auxm1 :: [Peca] -- ^ Lista de peças de uma linha do mapa.
      -> String -- ^ Resultado de comprimir.
auxm1 [] = []
auxm1 (m:ms) |m == Bloco Indestrutivel = 'I' : auxm1 ms
             |m == Bloco Destrutivel = 'D' : auxm1 ms
             |m == Vazia = 'V' : auxm1 ms

-- |Comprime a lista jogador que tem os jogadores e as suas informações numa string de tamanho reduzido somente com a informaçao essencial.
comprimeJogadores :: [Jogador] -- ^ Lista de jogadores e as suas informações vai ser lido buscando a sua posicao, direcao, numero de vidas, lasers e choques.
                  -> String    -- ^ String com a informaçao dos jogadores.
comprimeJogadores [] = []
comprimeJogadores [(Jogador (x,y) d v l c)] = "<" ++(show x) ++ "<"++ (show y) ++ "<" ++ (show d) ++ "<" ++ (auxj1 v l c) 
comprimeJogadores ((Jogador (x,y) d v l c):t) = "<" ++(show x) ++ "<"++ (show y) ++ "<" ++ (show d) ++ "<" ++ (auxj1 v l c) ++ "\n" ++ comprimeJogadores t


auxj1 :: Int -> Int -> Int -> String
auxj1 v l c = (show v) ++ "<" ++ (show l) ++ "<" ++ (show c) ++ "<"

-- |Comprime a lista Disparo que tem as informacoes do disparoCanhao ( este contem o id do joagdor que disparou , a posicao e a direcao), da disparaLaser ( que contem a id do joagdor que disparou , a posicao e a direcao) e por fim a disparaChoque (que contem a id do jogador e o numero de ticks)
comprimeDisparo :: [Disparo] -- ^ Lista de disparos e as suas informações vai ser lido buscando os tipos de disparos assim como os jogadores que efetuaram a posicao deles e as direções ou os ticks.
                -> String    -- ^ String com a informaçao dos disparos.
comprimeDisparo [] = []
comprimeDisparo [(DisparoCanhao j p d)] = comprimeCanhao (DisparoCanhao j p d)
comprimeDisparo [(DisparoLaser j p d)] = comprimeLaser (DisparoLaser j p d)
comprimeDisparo [(DisparoChoque j ts)] = comprimeChoque (DisparoChoque j ts)
comprimeDisparo ((DisparoCanhao j p d):t) = comprimeCanhao (DisparoCanhao j p d) ++ "\n" ++ comprimeDisparo t
comprimeDisparo ((DisparoLaser j p d):t) = comprimeLaser (DisparoLaser j p d) ++ "\n" ++ comprimeDisparo t
comprimeDisparo ((DisparoChoque j ts):t) = comprimeChoque (DisparoChoque j ts) ++ "\n" ++ comprimeDisparo t

-- |Comprime o DisparoCanhao numa String
comprimeCanhao :: Disparo -- ^ O tipo do Disparo, neste Caso DisparoChanhao.
               -> String  -- ^ A string resultante de comprimir o DisparoCanhao .
comprimeCanhao (DisparoCanhao j (x,y) d) = "<" ++(show x) ++ "<"++ (show y) ++ "<" ++ "K" ++ "<" ++ (show d) ++ "<" ++ (show j) ++ "<"

-- |Comprime o DisparoLaser numa String
comprimeLaser :: Disparo -- ^ O tipo do Disparo, neste Caso DisparoLaser.
               -> String  -- ^ A string resultante de comprimir o DisparoLaser. 
comprimeLaser (DisparoLaser j (x,y) d) = "<" ++(show x) ++ "<"++ (show y) ++ "<"++ "L" ++ "<" ++ (show d) ++ "<" ++ (show j) ++ "<"

-- |Comprime o DisparoChoque numa String
comprimeChoque :: Disparo -- ^ O tipo do Disparo, neste Caso DisparoChoque.
               -> String  -- ^ A string resultante de comprimir o DisparoChoque .
comprimeChoque (DisparoChoque j t) = "R" ++ "<" ++ (show j) ++ "<" ++ (show t) ++ "<"


-- * Funções para descomprime

descomprime :: String -> Estado
descomprime l = (Estado (stringToMapa (lines (primeiroLista (dividecomprime l)))) (stringToJogadores (lines (segundoLista (dividecomprime l)))) (stringToDisparos (lines (ultimoLista (dividecomprime l)))))

-- |Recebe um string e divide a em 3 parte sendo cada uma delas correspondente a cada parte do Estado.
--
-- __NB:__ Chama funções 'removedaLista' e 'posicaoNaLista'.
dividecomprime :: String   -- ^ String do estado comprimido.
               -> [String] -- ^ Lista de String sendo cada elemento da lista correspondente a compressão de cada parte do Estado ["mapa","jogadores","disparos"].
dividecomprime l = removedaLista (posicaoNaLista '|' l) l

-- |Remove os elementos nos indices indicados e com isso criar uma lista de String.
removedaLista :: [Int]    -- ^ Lista dos indices a seream removidos.
              -> String   -- ^ String do 'Estado' comprimido.
              -> [String] -- ^ Lista de String sendo cada elemento da lista correspondente a compressão de cada parte do Estado ["mapa","jogadores","disparos"].
removedaLista [x,y] l |x==0 && y == 1 && length l == 2 = [[],[],[]] 
                      |x==0 && y == 1 && length l /= 2 = [[],[],(drop 2 l)]
                      |otherwise = (take (x) l): (take (y-x-1) (drop (x+1) l)) :(drop (y+1) l):[]

-- |Procura na lista um certo caracter e depois cria uma lista com os indices onde esse caracter se encontra.
posicaoNaLista :: Eq a => a -> [a] -> [Int]
posicaoNaLista n [] = []
posicaoNaLista n l = aux 0 n l
                    where aux _ _ [] = []
                          aux i n (h:t) |n==h = i: aux (i+1) n t
                                        |otherwise = aux (i+1) n t
-- |Recebe uma Lista de String e dá a primeira String dessa lista.
primeiroLista :: [String] -- ^ Lista de String sendo cada elemento da lista correspondente a compressão de cada parte do Estado ["mapa","jogadores","disparos"].
              -> String   -- ^ Primeiro elemento da lista anterior ["mapa"].
primeiroLista (h:t) = h

-- |Recebe uma Lista de String e dá a segunda String dessa lista.
segundoLista :: [String] -- ^ Lista de String sendo cada elemento da lista correspondente a compressão de cada parte do Estado ["mapa","jogadores","disparos"].
             -> String  -- ^ Segunda elemento da lista anterior ["jogadores"].
segundoLista (h:i:t) = i

-- |Recebe uma Lista de String e dá a ultima String dessa lista.
ultimoLista :: [String] -- ^ Lista de String sendo cada elemento da lista correspondente a compressão de cada parte do Estado ["mapa","jogadores","disparos"].
            -> String -- ^ Ultimo elemento da lista anterior ["disparos"].
ultimoLista [h] = h
ultimoLista (h:t) = ultimoLista t

-- |Descomprime a lista de strings resultante de usar a função lines (pre-definida em Data.Char) no primeiro elemento da lista dividida da string inicial ["mapa"].
--
-- __NB__ Chama função 'stringToMapaux'.
stringToMapa :: [String] -- ^ String resultante da utilizaçao do lines.
             -> Mapa     -- ^ Mapa descomprimido.
stringToMapa [] = []
stringToMapa ((h:t):r) = stringToMapaux (h:t) : stringToMapa r

-- |Cria o Mapa por linha usando cada string da String resultante da utilizaçao do lines.
stringToMapaux :: String -- ^ Uma string da String resultante da utilizaçao do lines.
               -> [Peca] -- ^ Uma das linhas do 'Mapa'.
stringToMapaux [] = []
stringToMapaux (h:t) |h == 'I' = (Bloco Indestrutivel):stringToMapaux t
                     |h == 'D' = (Bloco Destrutivel) :stringToMapaux t
                     |h == 'V' = (Vazia):stringToMapaux t

-- |Descomprime a lista de strings resultante de usar a função lines (pre-definida em Data.Char) no segunda elemento da lista dividida da string inicial ["jogadores"].
--
-- __NB:__ Chama função 'stringToJogador'
stringToJogadores :: [String]  -- ^ String resultante da utilizaçao do lines.
                  -> [Jogador] -- ^ Lista de Jogadores descomprimida
stringToJogadores [] = []
stringToJogadores (h:t) = stringToJogador h : stringToJogadores t

-- |Cria 'Jogador' usando cada string da String resultante da utilizaçao do lines.
--
-- __NB:__ Chama funções 'stringToPosicao', 'entreChar', 'posicaoNaLista' , 'elemString', 'elemList' e read (Pre-definida)
stringToJogador :: String  -- ^ Uma string da String resultante da utilizaçao do lines.
                -> Jogador -- ^ Um 'Jogador' resultante da lista de String.
stringToJogador l = Jogador (stringToPosicao (entreChar (posicaoNaLista '<' (inicioString l)) l)) (read (elemString 1 (restoString l):[]) :: Direcao) (read (elemList 1 (entreChar (posicaoNaLista '<' (restoString l)) (restoString l))) :: Int) (read (elemList 2 (entreChar (posicaoNaLista '<' (restoString l)) (restoString l))) :: Int) (read (elemList 3 (entreChar (posicaoNaLista '<' (restoString l)) (restoString l))) :: Int)

-- |Descomprime a lista de strings resultante de usar a função lines (pre-definida em Data.Char) no ultimo elemento da lista dividida da string inicial ["disparo"].
--
-- __NB:__ Chama função 'stringToDisparo'.
stringToDisparos :: [String]  -- ^ Uma String resultante da utilizaçao do lines. 
                 -> [Disparo] -- ^ Lista de Disparos descomprimida
stringToDisparos [] = []
stringToDisparos (h:t) = stringToDisparo h : stringToDisparos t

-- |Cria 'Disparo' usando cada string da String resultante da utilizaçao do lines.
--
-- __NB:___ Chama funções 'elemString', 'restoString', 'stringToPosicao', 'entreChar', 'posicaoNaLista', 'elemList', digitToInt (Pre-definida) e read (Pre-definida).
stringToDisparo :: String  -- ^ Uma string da String resultante da utilizaçao do lines.
                -> Disparo -- ^ Um 'Disparo' resultante da lista de String.
stringToDisparo l |(elemString 1 (restoString l)) == 'K' = DisparoCanhao (read (elemList 2 (entreChar (posicaoNaLista '<' (restoString l)) (restoString l))) :: Int) (stringToPosicao (entreChar (posicaoNaLista '<' (inicioString l)) (inicioString l))) (read (elemList 1 (entreChar (posicaoNaLista '<' (restoString l)) (restoString l))) :: Direcao)
                  |(elemString 1 (restoString l)) == 'L' = DisparoLaser (read (elemList 2 (entreChar (posicaoNaLista '<' (restoString l)) (restoString l))) :: Int) (stringToPosicao (entreChar (posicaoNaLista '<' (inicioString l)) (inicioString l))) (read (elemList 1 (entreChar (posicaoNaLista '<' (restoString l)) (restoString l))) :: Direcao)
                  |otherwise = DisparoChoque (read (elemList 1 (entreChar (posicaoNaLista '<' l) l)) :: Int) (read (elemList 2 (entreChar (posicaoNaLista '<' l) l)) :: Int)

-- |Serve para criar uma 'Posicao'.
entreChar :: [Int] -> String -> [String]
entreChar [x,y,z] l = (take (y-x-1) (drop (x+1) l)) : (take (z-y-1) (drop (y+1) l)) : []
entreChar [x,y,w,z] l = (take (y-x-1) (drop (x+1) l)) : (take (w-y-1) (drop (y+1) l)) : (take (z-w-1) (drop (w+1) l)) : []

-- |Serve para criar uma 'Posicao'.
stringToPosicao :: [String] -> Posicao 
stringToPosicao [h,t] = ((read h :: Int),(read t :: Int))

-- |Funçao que vai pegar na primeira parte de uma String
inicioString :: String -> String
inicioString [] = []
inicioString (h:t) |h == 'K' || h == 'L' ||h == 'R' ||h == 'C' ||h == 'D' ||h == 'B' ||h == 'E' = []
                   |otherwise = h : inicioString t

-- |Separa do resto da string a posicao comprimida.
restoString :: String -> String
restoString [] = [] 
restoString (h:t) |h == 'K' || h == 'L' ||h == 'R' ||h == 'C' ||h == 'D' ||h == 'B' ||h == 'E' = (h:t)
                  |otherwise = restoString t

-- |Pega num determinado elemento de uma string (ex : se n == 1, então vai pegar no primeiro elemento de uma String)
elemString :: Int -> String -> Char
elemString 1 (h:t) = h
elemString n (h:t) = elemString (n-1) t 

-- |Pega numa determinada String  de uma lista de String (ex : se n == 1, então vai pegar na primeira String) 
elemList :: Int -> [String] -> String
elemList 1 (h:t) = h
elemList n (h:t) = elemList (n-1) t