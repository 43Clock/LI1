-- | Este módulo define funções comuns da Tarefa 5 do trabalho prático.
module Tarefa5_2018li1g006 where

import LI11819
import Tarefa0_2018li1g006
import Tarefa1_2018li1g006
import Tarefa2_2018li1g006
import Tarefa3_2018li1g006
import Tarefa4_2018li1g006
import Tarefa6_2018li1g006
import Graphics.Gloss
import Graphics.Gloss.Interface.Pure.Game

-- | Função principal da Tarefa 5.
--
-- __NB:__ Esta Tarefa é completamente livre. Deve utilizar a biblioteca <http://hackage.haskell.org/package/gloss gloss> para animar o jogo, e reutilizar __de forma completa__ as funções das tarefas anteriores.
main :: IO ()
main = do Just Vazia <- loadJuicy "blocovaz.png"
          Just Bloco Destrutivel <- loadJuicy "blocodes.png"
          Just Bloco Indestrutivel <- loadJuicy "blocoind.png"
          Just Jogador 1 <- loadJuicy "tank1.png"
          Just Jogador 2 <- loadJuicy "tank2.png"
          Just Jogador 3 <- loadJuicy "tank3.png"
          Just Jogador 4 <- loadJuicy "tank4.png"
          play 
               dm                       -- janela onde irá correr o jogo
               (greyN 0.5)              -- côr do fundo da janela
               fr                       -- frame rate
               (estadoInicial tank)     -- estado inicial
               desenhaEstado            -- desenha o estado do jogo
               reageEvento              -- reage a um evento
               reageTempo               -- reage ao passar do tempo

-- * Estado Jogo

type Estado = (Float,Float)

estadoInicial :: Estado
estadoInicial = (0,0)

poligno :: Picture
poligno = Polygon [(0,0),(10,0),(10,10),(0,10),(0,0)]

desenhaEstado :: Estado -> Picture
desenhaEstado (x,y) = Translate x y poligno

reageEvento :: Event -> Estado -> Estado
reageEvento (EventKey (SpecialKey KeyUp)    Down _ _) (x,y) = (x,y+5)
reageEvento (EventKey (SpecialKey KeyDown)  Down _ _) (x,y) = (x,y-5)
reageEvento (EventKey (SpecialKey KeyLeft)  Down _ _) (x,y) = (x-5,y)
reageEvento (EventKey (SpecialKey KeyRight) Down _ _) (x,y) = (x+5,y)
reageEvento _ s = s -- ignora qualquer outro evento

reageTempo :: Float -> Estado -> Estado
reageTempo n (x,y) = (x,y-0.1)

-- * Estado Gloss

type EstadoGloss = (Estado,Picture)

estadoInicial :: Picture -> EstadoGloss
estadoInicial tank = (estadoInicial,tank)

desenhaEstado :: EstadoGloss -> Picture
desenhaEstado ((x,y),tank) = Translate x y tank

reageEvento :: Event -> EstadoGloss -> EstadoGloss
reageEvento ev (e,tank) = (reageEvento ev e,tank)

reageTempo :: Float -> EstadoGloss -> EstadoGloss
reageTempo t (e,tank) = (reageTempo t e,tank)

fr :: Int
fr = 50

dm :: Display
dm = InWindow "Novo Jogo" (1920, 1080) (0,0)